{"version":3,"sources":["header-creditcard.js","main.js","input.js","App.js","serviceWorker.js","index.js"],"names":["Imgcard","react_default","a","createElement","className","src","main","props","number","date","name","Inputs","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","type","onChange","e","changeNumber","target","value","slice","placeholder","maxLength","changeDate","changeName","toUpperCase","Component","App","header_creditcard","src_main","input","newNumber","setState","newDate","newName","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4ae060a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Imgcard() {\r\n    return (\r\n        <div>\r\n            <h1 className='credit'>CREDIT CARD</h1>\r\n            <img className='puce' src='https://static4.depositphotos.com/1003857/292/i/950/depositphotos_2922078-stock-photo-creditcard-chip.jpg'/>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Imgcard;","import React from 'react';\r\n\r\nfunction main(props) {\r\n    \r\n    return (\r\n        <div className=\"numbercarholder\">\r\n            <div>\r\n                <h3 className='number'>{props.number}</h3>\r\n                <h3 className='n2'>{props.date}</h3>\r\n                <h2 className='carholder'>{props.name}</h2>\r\n            </div>\r\n            <div>\r\n                <img className=\"master-card\" src=\"https://www.logolynx.com/images/logolynx/e0/e01dbbb3068c7f5135b90b0ce91445f9.png\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default main;","import React, { Component } from \"react\"\r\n\r\nclass Inputs extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"inputs\">\r\n                <input className='input' type=\"text\" onChange={(e) => this.props.changeNumber(e.target.value.slice(0,4)+\" \"+e.target.value.slice(4,8)+\" \"+e.target.value.slice(8,12)+\" \"+e.target.value.slice(12,16)+\"\")} placeholder=\"1234 1234 1234 1234\" maxLength=\"16\"></input>\r\n                <input className='input' type=\"text\" onChange={(e) => this.props.changeDate(e.target.value.slice(0,2)+'/'+e.target.value.slice(2,4))} placeholder=\"**/**\" maxLength=\"4\"></input>\r\n                <input className='input' type=\"text\" onChange={(e) => this.props.changeName(e.target.value.toUpperCase())} placeholder=\"name\" maxLength='20'></input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inputs;","import React, { Component } from 'react';\nimport './App.css';\nimport Imgcard from \"./header-creditcard\";\nimport Main from \"./main\";\nimport Input from \"./input\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      number: \"\",\n      date: \"\",\n      name: \"\"\n    }\n  }\n  render() {\n    return (\n \n      <div>\n        <div className=\"App\">\n          <Imgcard />\n          <Main number={this.state.number} date={this.state.date} name={this.state.name} />\n        </ div>\n        <Input\n         changeNumber={(newNumber) => this.setState({\n          number: newNumber\n        })}\n          changeDate={(newDate) => this.setState({\n            date: newDate\n          })}\n          changeName={(newName) => this.setState({\n            name: newName\n          })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}